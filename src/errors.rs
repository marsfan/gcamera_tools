/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at https: //mozilla.org/MPL/2.0/.
*/
//! Enumeration of errors the tool can produce.
#![deny(clippy::implicit_return)]
#![allow(clippy::needless_return)]

use std::fmt;

/// Enumeration of errors generated by the tool.
#[derive(PartialEq, Eq, Debug)]
pub enum GCameraError {
    /// Indicates something went wrong with reading the image.
    // TODO: Encapsulate the std::io::Error that was the source?
    ImageReadError,

    /// Indicates something went wrong saving the image.
    // TODO: Encapsulate the std::io::Error that was the source?
    ImageWriteError,

    ///Indicates something went wrong saving the debug data
    // TODO: Encapsulate the std::io::Error that was the source?
    DebugDataWriteError,

    /// Indicates that the provided file does not have the correct magic bytes
    /// to be a JPEG file.
    InvalidJpegMagic,

    /// Indicates that parsing the XML Document failed
    XMLParsingError {
        /// The XML Parser error
        xml_error: roxmltree::Error,
    },

    /// Indicates that an XML attribute could not be parsed to a U32
    XMLAttributeToU32Error {
        /// The value of the attribute
        attribute: Option<String>,
    },

    /// Indicates that XMP Data could not be found in any segments.
    NoXMPData,

    /// Indicates that the Description Node could not be found in the XML
    DescriptionNodeNotFound,

    /// Indicates that the given magic start point could not be found.
    MagicNotFound {
        /// The magic that was being searched for.
        magic: String,
    },

    /// Indicates that the next JPEG marker could not be found.
    JpegMarkerNotFound,

    /// Indicates that the type of JPEG Marker is not known.
    UnknownJpegMarker {
        /// The bytes of the unknown marker.
        marker_byte: u8,
    },

    /// Catch-all for any other possible error type
    Other {
        /// The error message
        msg: String,
    },
}

impl fmt::Display for GCameraError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        return match self {
            GCameraError::ImageReadError => write!(f, "Error reading the image."),
            GCameraError::ImageWriteError => write!(f, "Error writing the image."),
            GCameraError::DebugDataWriteError => write!(f, "Error writing the debug data."),
            GCameraError::InvalidJpegMagic => {
                write!(f, "File does not start with valid JPEG Magic.!")
            }
            GCameraError::XMLParsingError { xml_error } => {
                write!(f, "Error parsing XML Document. XML Error: {xml_error}.")
            }
            GCameraError::XMLAttributeToU32Error { attribute } => {
                write!(
                    f,
                    "Error parsing XML Attribute to a u32. Attribute: {:?}.",
                    attribute
                )
            }
            GCameraError::NoXMPData => write!(f, "No XMP Data found in the image."),
            GCameraError::DescriptionNodeNotFound => {
                write!(f, "Description not found in XMP data.")
            }
            GCameraError::MagicNotFound { magic } => {
                write!(f, "Could not find magic '{magic}' in image.")
            }
            GCameraError::JpegMarkerNotFound => {
                write!(f, "Could not find another JPEG Segment Marker.")
            }
            GCameraError::UnknownJpegMarker { marker_byte } => {
                write!(
                    f,
                    "JPEG Marker with bytes '{:02x}' is not known.",
                    marker_byte
                )
            }
            GCameraError::Other { msg } => {
                write!(f, "Unknown Error Occurred. msg: {msg}")
            }
        };
    }
}
