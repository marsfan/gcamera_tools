/*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at https: //mozilla.org/MPL/2.0/.
*/
//! Enumeration of errors the tool can produce.

use std::fmt;

use crate::jpeg::xmp::SemanticType;

/// Enumeration of errors generated by the tool.
#[derive(PartialEq, Eq, Debug)]
pub enum GCameraError {
    /// Indicates something went wrong with reading the image.
    // TODO: Encapsulate the std::io::Error that was the source?
    ImageReadError,

    /// Indicates something went wrong saving the image.
    // TODO: Encapsulate the std::io::Error that was the source?
    ImageWriteError,

    ///Indicates something went wrong saving the debug data
    // TODO: Encapsulate the std::io::Error that was the source?
    DebugDataWriteError,

    /// Indicates something went wro ng with saving the motion video
    // TODO: Encapsulate the std::io::Error that was the source?
    MotionVideoWriteError,

    /// Indicates that the provided file does not have the correct magic bytes
    /// to be a JPEG file.
    InvalidJpegMagic,

    /// Indicates that somehow the one of the `data` or `length` members
    /// of `JpegSegment` is `None`, while the other is `Some`. This should
    /// not be possible at all, so we need to error out right away.
    LengthDataNotSameOption,

    /// Indicates that parsing the XML Document failed
    XMLParsingError {
        /// The XML Parser error
        xml_error: roxmltree::Error,
    },

    /// Indicates that an XML attribute could not be parsed
    XMLAttributeParseError {
        /// The value of the attribute
        attribute: Option<String>,
    },

    /// Indicates that XMP Data could not be found in any segments.
    NoXMPData,

    /// Indicates that the Description Node could not be found in the XML
    DescriptionNodeNotFound,

    /// Indicates that the given semantic string is not a known type.
    UnknownResourceSemantic {
        /// The string that could not be converted to a semantic enum.
        semantic: String,
    },

    /// Indicates that the given magic start point could not be found.
    MagicNotFound {
        /// The magic that was being searched for.
        magic: String,
    },

    /// Indicates that the next JPEG marker could not be found.
    JpegMarkerNotFound,

    /// Indicates that the type of JPEG Marker is not known.
    UnknownJpegMarker {
        /// The bytes of the unknown marker.
        marker_byte: u8,
    },

    /// Indicates that the image contains no resources of the given type
    NoResourcesOfType {
        /// The type of resource that was searched for
        semantic_type: SemanticType,
    },
    /// Catch-all for any other possible error type
    Other {
        /// The error message
        msg: String,
    },
}

impl fmt::Display for GCameraError {
    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
        return match self {
            GCameraError::ImageReadError => write!(formatter, "Error reading the image."),
            GCameraError::ImageWriteError => write!(formatter, "Error writing the image."),
            GCameraError::DebugDataWriteError => write!(formatter, "Error writing the debug data."),
            GCameraError::MotionVideoWriteError => {
                write!(formatter, "Error writing the motion video.")
            }
            GCameraError::InvalidJpegMagic => {
                write!(formatter, "File does not start with valid JPEG Magic.!")
            }
            GCameraError::LengthDataNotSameOption => {
                write!(formatter, "Data and length must either both be None, or both be some. This should not be possible.")
            }
            GCameraError::XMLParsingError { xml_error } => {
                write!(
                    formatter,
                    "Error parsing XML Document. XML Error: {xml_error}."
                )
            }
            GCameraError::XMLAttributeParseError { attribute } => {
                write!(
                    formatter,
                    "Error parsing XML Attribute to a u32. Attribute: {attribute:?}.",
                )
            }
            GCameraError::NoXMPData => write!(formatter, "No XMP Data found in the image."),
            GCameraError::DescriptionNodeNotFound => {
                write!(formatter, "Description not found in XMP data.")
            }
            GCameraError::UnknownResourceSemantic { semantic } => {
                write!(
                    formatter,
                    "Resource has an unknown semantic type of '{semantic}'."
                )
            }
            GCameraError::MagicNotFound { magic } => {
                write!(formatter, "Could not find magic '{magic}' in image.")
            }
            GCameraError::JpegMarkerNotFound => {
                write!(formatter, "Could not find another JPEG Segment Marker.")
            }
            GCameraError::UnknownJpegMarker { marker_byte } => {
                write!(
                    formatter,
                    "JPEG Marker with bytes '{marker_byte:02x}' is not known.",
                )
            }
            GCameraError::NoResourcesOfType { semantic_type } => {
                write!(
                    formatter,
                    "The image contains no resources of type {semantic_type:?}"
                )
            }
            GCameraError::Other { msg } => {
                write!(formatter, "Unknown Error Occurred. msg: {msg}")
            }
        };
    }
}
